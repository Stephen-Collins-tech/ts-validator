#!/usr/bin/env bash

set -euo pipefail

# Move to repo root for consistent paths
cd "$(dirname "$0")/.."
REPO_ROOT=$(pwd)

# Binary name defined in cli/Cargo.toml
BINARY_NAME="ts-validator"
PACKAGE_NAME="cli"

# Get version from git tag
VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
# Remove 'v' prefix for package.json version
NPM_VERSION="${VERSION#v}"
echo "üì¶ Building version: $VERSION (NPM: $NPM_VERSION)"

# Output directory for npm wrapper
NPM_WRAPPER_DIR="${REPO_ROOT}/npm-wrapper"
BIN_DIR="${NPM_WRAPPER_DIR}/bin"
mkdir -p "$BIN_DIR"

# Create/overwrite version.js file for npm wrapper
VERSION_FILE="${NPM_WRAPPER_DIR}/version.js"
echo "üîÑ Overwriting ${VERSION_FILE} with version ${VERSION}"

# Write version file with direct echo commands to avoid heredoc issues
echo "// Generated by build.sh - do not edit manually" > "${VERSION_FILE}"
echo "module.exports = '${VERSION}';" >> "${VERSION_FILE}"

# Update package.json version
echo "üîÑ Updating package.json version to ${NPM_VERSION}"
if command -v jq >/dev/null 2>&1; then
  # Use jq if available for reliable JSON manipulation
  jq ".version = \"${NPM_VERSION}\"" "${NPM_WRAPPER_DIR}/package.json" > "${NPM_WRAPPER_DIR}/package.json.new"
  mv "${NPM_WRAPPER_DIR}/package.json.new" "${NPM_WRAPPER_DIR}/package.json"
else
  # Fallback to sed (less reliable but works for simple cases)
  sed -i.bak "s/\"version\": \"[^\"]*\"/\"version\": \"${NPM_VERSION}\"/" "${NPM_WRAPPER_DIR}/package.json"
  rm "${NPM_WRAPPER_DIR}/package.json.bak"
fi

# Update CLI crate version
CLI_CARGO_TOML="${REPO_ROOT}/crates/cli/Cargo.toml"
echo "üîÑ Updating CLI crate version to ${NPM_VERSION}"
sed -i.bak "s/^version = \"[^\"]*\"/version = \"${NPM_VERSION}\"/" "${CLI_CARGO_TOML}"
rm "${CLI_CARGO_TOML}.bak"

# Verify file was created properly
if [ -f "${VERSION_FILE}" ]; then
  echo "‚úÖ Created version.js with version ${VERSION}"
  cat "${VERSION_FILE}"
else
  echo "‚ùå Failed to create version.js"
  exit 1
fi

# Rust target triples used for cross-compilation
TARGETS=(
  "x86_64-unknown-linux-gnu"
  "aarch64-unknown-linux-gnu"
  "x86_64-apple-darwin"
  "aarch64-apple-darwin"
  "x86_64-pc-windows-gnu"
)

echo "üîÑ Building binaries for version ${VERSION}..."
for TARGET in "${TARGETS[@]}"; do
  echo "üî® Building for $TARGET..."
  cross build --release --target "$TARGET" --package "$PACKAGE_NAME"

  # Determine binary name based on target platform
  case "$TARGET" in
    *windows*) 
      OUT_NAME="${BINARY_NAME}-${TARGET}.exe"
      SRC_NAME="${BINARY_NAME}.exe" 
      ;;
    *) 
      OUT_NAME="${BINARY_NAME}-${TARGET}"
      SRC_NAME="${BINARY_NAME}" 
      ;;
  esac

  SRC_PATH="${REPO_ROOT}/target/$TARGET/release/$SRC_NAME"
  DEST_PATH="$BIN_DIR/$OUT_NAME"

  if [[ ! -f "$SRC_PATH" ]]; then
    echo "‚ùå Build failed or binary missing: $SRC_PATH"
    exit 1
  fi

  cp "$SRC_PATH" "$DEST_PATH"
  chmod +x "$DEST_PATH"
  echo "‚úÖ Copied to $DEST_PATH"
done

echo "üéâ All binaries built and copied to $BIN_DIR"
echo "üì¶ NPM package is ready for publishing with version ${NPM_VERSION}"
